{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","toggleComplete","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","autoComplete","TextField","label","name","type","value","onChange","target","Button","Todo","removeTodo","ListItem","style","display","justifyContent","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","component","listStyleType","map","key","App","setTodos","numerateTodos","settings","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac19948d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\n\r\nfunction TodoForm({ addTodo, toggleComplete }) {\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (todo.task.trim()) {\r\n      addTodo({ ...todo, id: uuid() });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <form onSubmit={handleSubmit} className=\"form\" autoComplete=\"off\">\r\n        <TextField\r\n          label=\"Task\"\r\n          name=\"task\"\r\n          type=\"text\"\r\n          value={todo.task}\r\n          onChange={handleTaskInputChange}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n        <Button className=\"add-button\" type=\"submit\">\r\n          Add\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react'\r\nimport {Checkbox, IconButton, ListItem, Typography} from '@material-ui/core'\r\nimport Close from \"@material-ui/icons/Close\"\r\n\r\nfunction Todo({todo, toggleComplete, removeTodo}) {\r\n\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id);\r\n    }\r\n\r\n    return (\r\n        <ListItem style={{ display: \"flex\", justifyContent: 'space-around' }}>\r\n            <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n            <Typography className='todo-body' variant='body1' style={{textDecoration: todo.completed ? \"line-through\" : null}}>{todo.task}</Typography>\r\n            <IconButton onClick={handleRemoveClick}>\r\n                <Close />\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nexport default Todo","import React from 'react'\r\nimport Todo from './Todo'\r\nimport {List} from \"@material-ui/core\"\r\n\r\nfunction TodoList({todos, removeTodo, toggleComplete}) {\r\n\r\n    return (\r\n        <List className='todo-list' component='ol' style={{listStyleType: 'disc'}}>\r\n            {todos.map(todo => (\r\n                <Todo key={todo.id} todo={todo} removeTodo={removeTodo} toggleComplete={toggleComplete}/>\r\n            ))}\r\n        </List>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoList","import React, { useEffect, useState } from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./App.css\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const [settings, setSettings] = useState({\n    numerateTodos: false,\n  });\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  return (\n    <div>\n      <header id='header'>\n        <Typography variant=\"h2\" className=\"title\">\n          Todo\n        </Typography>\n        <TodoForm addTodo={addTodo} />\n      </header>\n      <div id=\"todo\">\n        <TodoList\n          todos={todos}\n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}\n          settings={settings}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}